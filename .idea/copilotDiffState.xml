<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/timerPage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/timerPage.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState, useRef } from &quot;react&quot;;&#10;import { View, Text, TouchableOpacity, Image, Vibration } from &quot;react-native&quot;;&#10;import { icons } from &quot;@/constants&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { CountdownCircleTimer } from &quot;react-native-countdown-circle-timer&quot;;&#10;import { router, useLocalSearchParams } from &quot;expo-router&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;&#10;const EXERCISE_DURATION = 5;&#10;&#10;export default function TimerPage() {&#10;  const params = useLocalSearchParams();&#10;  const exercises: string[] = params.exercises&#10;    ? JSON.parse(params.exercises as string)&#10;    : [&quot;Exercise&quot;];&#10;&#10;  const workoutName: string = params.workoutName&#10;    ? String(params.workoutName)&#10;    : &quot;Workout&quot;;&#10;  const [exerciseIdx, setExerciseIdx] = useState(0);&#10;  const [isPlaying, setIsPlaying] = useState(true);&#10;&#10;  const handleComplete = () =&gt; {&#10;    Vibration.vibrate(100);&#10;    if (exerciseIdx &lt; exercises.length - 1) {&#10;      setExerciseIdx((idx) =&gt; idx + 1);&#10;      setIsPlaying(false);&#10;      setTimeout(() =&gt; setIsPlaying(true), 300);&#10;      return { shouldRepeat: false };&#10;    } else {&#10;      (async () =&gt; {&#10;        const today = new Date().toISOString().slice(0, 10);&#10;        const entry = { workoutName, date: today };&#10;        try {&#10;          const prev = await AsyncStorage.getItem(&quot;workoutHistory&quot;);&#10;          const history = prev ? JSON.parse(prev) : [];&#10;          await AsyncStorage.setItem(&#10;            &quot;workoutHistory&quot;,&#10;            JSON.stringify([...history, entry]),&#10;          );&#10;        } catch {}&#10;        router.replace({ pathname: &quot;/(tabs)/history&quot; });&#10;      })();&#10;      return { shouldRepeat: false };&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center &quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[80px] bg-white rounded-full shadow-md shadow-neutral-400/70 justify-center mt-5&quot;&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={() =&gt; {&#10;              if (router.canGoBack?.()) {&#10;                router.back();&#10;              } else {&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }&#10;            }}&#10;            className=&quot;absolute top-[10px] left-8 z-10&quot;&#10;          &gt;&#10;            &lt;Image&#10;              source={icons.backArrow}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[30px] h-[30px]&quot;&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;Text className=&quot;text-black text-[30px] text-center font-bold&quot;&gt;&#10;            {workoutName}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;justify-center w-full h-[38px] mt-8&quot;&gt;&#10;          &lt;Text className=&quot;text-[30px] text-general-1000 font-bold text-center&quot;&gt;&#10;            {exercises[exerciseIdx]}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 items-center justify-center bg-white mt-4&quot;&gt;&#10;          &lt;CountdownCircleTimer&#10;            isPlaying={isPlaying}&#10;            duration={EXERCISE_DURATION}&#10;            key={exerciseIdx}&#10;            colors=&quot;#FC713A&quot;&#10;            trailColor=&quot;#EAE8FF&quot;&#10;            size={220}&#10;            strokeWidth={18}&#10;            onComplete={handleComplete}&#10;          &gt;&#10;            {({ remainingTime }) =&gt; {&#10;              const minutes = String(Math.floor(remainingTime / 60)).padStart(&#10;                2,&#10;                &quot;0&quot;,&#10;              );&#10;              const seconds = String(remainingTime % 60).padStart(2, &quot;0&quot;);&#10;              return (&#10;                &lt;Text className=&quot;text-[40px] font-bold text-[#0C051A]&quot;&gt;&#10;                  {minutes}:{seconds}&#10;                &lt;/Text&gt;&#10;              );&#10;            }}&#10;          &lt;/CountdownCircleTimer&gt;&#10;          &lt;View className=&quot;flex flex-row items-center justify-center mt-8&quot;&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                setIsPlaying((p) =&gt; !p);&#10;                Vibration.vibrate(10);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center mr-8 &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.pause}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;&#10;                {isPlaying ? &quot;Pause&quot; : &quot;Resume&quot;}&#10;              &lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                Vibration.vibrate(10);&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.quit}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Quit&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState, useRef } from &quot;react&quot;;&#10;import { View, Text, TouchableOpacity, Image, Vibration } from &quot;react-native&quot;;&#10;import { icons } from &quot;@/constants&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { CountdownCircleTimer } from &quot;react-native-countdown-circle-timer&quot;;&#10;import { router, useLocalSearchParams } from &quot;expo-router&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;&#10;const EXERCISE_DURATION = 5;&#10;&#10;export default function TimerPage() {&#10;  const params = useLocalSearchParams();&#10;  const exercises: string[] = params.exercises&#10;    ? JSON.parse(params.exercises as string)&#10;    : [&quot;Exercise&quot;];&#10;&#10;  const workoutName: string = params.workoutName&#10;    ? String(params.workoutName)&#10;    : &quot;Workout&quot;;&#10;  const [exerciseIdx, setExerciseIdx] = useState(0);&#10;  const [isPlaying, setIsPlaying] = useState(true);&#10;&#10;  const handleComplete = () =&gt; {&#10;    Vibration.vibrate(100);&#10;    if (exerciseIdx &lt; exercises.length - 1) {&#10;      setExerciseIdx((idx) =&gt; idx + 1);&#10;      setIsPlaying(false);&#10;      setTimeout(() =&gt; setIsPlaying(true), 300);&#10;      return { shouldRepeat: false };&#10;    } else {&#10;      (async () =&gt; {&#10;        const today = new Date().toISOString().slice(0, 10);&#10;        // Log each exercise completed for today&#10;        const entries = exercises.map((exercise) =&gt; ({&#10;          exercise,&#10;          workoutName,&#10;          date: today,&#10;        }));&#10;        try {&#10;          const prev = await AsyncStorage.getItem(&quot;workoutHistory&quot;);&#10;          const history = prev ? JSON.parse(prev) : [];&#10;          await AsyncStorage.setItem(&#10;            &quot;workoutHistory&quot;,&#10;            JSON.stringify([...history, ...entries]),&#10;          );&#10;        } catch {}&#10;        router.replace({ pathname: &quot;/(tabs)/history&quot; });&#10;      })();&#10;      return { shouldRepeat: false };&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center &quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[80px] bg-white rounded-full shadow-md shadow-neutral-400/70 justify-center mt-5&quot;&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={() =&gt; {&#10;              if (router.canGoBack?.()) {&#10;                router.back();&#10;              } else {&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }&#10;            }}&#10;            className=&quot;absolute top-[10px] left-8 z-10&quot;&#10;          &gt;&#10;            &lt;Image&#10;              source={icons.backArrow}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[30px] h-[30px]&quot;&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;Text className=&quot;text-black text-[30px] text-center font-bold&quot;&gt;&#10;            {workoutName}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;justify-center w-full h-[38px] mt-8&quot;&gt;&#10;          &lt;Text className=&quot;text-[30px] text-general-1000 font-bold text-center&quot;&gt;&#10;            {exercises[exerciseIdx]}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 items-center justify-center bg-white mt-4&quot;&gt;&#10;          &lt;CountdownCircleTimer&#10;            isPlaying={isPlaying}&#10;            duration={EXERCISE_DURATION}&#10;            key={exerciseIdx}&#10;            colors=&quot;#FC713A&quot;&#10;            trailColor=&quot;#EAE8FF&quot;&#10;            size={220}&#10;            strokeWidth={18}&#10;            onComplete={handleComplete}&#10;          &gt;&#10;            {({ remainingTime }) =&gt; {&#10;              const minutes = String(Math.floor(remainingTime / 60)).padStart(&#10;                2,&#10;                &quot;0&quot;,&#10;              );&#10;              const seconds = String(remainingTime % 60).padStart(2, &quot;0&quot;);&#10;              return (&#10;                &lt;Text className=&quot;text-[40px] font-bold text-[#0C051A]&quot;&gt;&#10;                  {minutes}:{seconds}&#10;                &lt;/Text&gt;&#10;              );&#10;            }}&#10;          &lt;/CountdownCircleTimer&gt;&#10;          &lt;View className=&quot;flex flex-row items-center justify-center mt-8&quot;&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                setIsPlaying((p) =&gt; !p);&#10;                Vibration.vibrate(10);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center mr-8 &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.pause}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;&#10;                {isPlaying ? &quot;Pause&quot; : &quot;Resume&quot;}&#10;              &lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                Vibration.vibrate(10);&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.quit}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Quit&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>