<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/timerPage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/timerPage.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState, useRef } from &quot;react&quot;;&#10;import { View, Text, TouchableOpacity, Image } from &quot;react-native&quot;;&#10;import { icons } from &quot;@/constants&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { CountdownCircleTimer } from &quot;react-native-countdown-circle-timer&quot;;&#10;&#10;export default function TimerPage() {&#10;  const [seconds, setSeconds] = useState(0);&#10;  const [isRunning, setIsRunning] = useState(false);&#10;  const intervalRef = useRef&lt;number | null&gt;(null);&#10;  const [Exercise, SetExercise] = useState(&quot;Exercise&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isRunning) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        setSeconds((prev) =&gt; prev + 1);&#10;      }, 1000);&#10;    } else if (intervalRef.current) {&#10;      clearInterval(intervalRef.current);&#10;    }&#10;&#10;    return () =&gt; {&#10;      if (intervalRef.current) clearInterval(intervalRef.current);&#10;    };&#10;  }, [isRunning]);&#10;&#10;  const formatTime = (totalSeconds: number) =&gt; {&#10;    const mins = Math.floor(totalSeconds / 60)&#10;      .toString()&#10;      .padStart(2, &quot;0&quot;);&#10;    const secs = (totalSeconds % 60).toString().padStart(2, &quot;0&quot;);&#10;    return `${mins}:${secs}`;&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center &quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot; w-full h-[80px] bg-white rounded-full shadow-md shadow-neutral-400/70 justify-center mt-5&quot;&gt;&#10;          &lt;Image&#10;            source={icons.backArrow}&#10;            resizeMode=&quot;contain&quot;&#10;            className=&quot;w-[30px] h-[30px] absolute top-[40px] left-8&quot;&#10;          /&gt;&#10;          &lt;Text className=&quot;text-black text-[30px] text-center font-bold   &quot;&gt;&#10;            Timer&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;justify-center w-full h-[38px] mt-8&quot;&gt;&#10;          &lt;Text className=&quot;text-[30px] text-general-1000 font-bold text-center&quot;&gt;&#10;            {Exercise}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 items-center justify-center bg-white&quot;&gt;&#10;          &lt;CountdownCircleTimer&#10;            isPlaying&#10;            duration={30}&#10;            colors={[&quot;#FC713A&quot;]}&#10;            trailColor=&quot;#EAE8FF&quot;&#10;            size={220}&#10;            strokeWidth={18}&#10;          &gt;&#10;            {({ remainingTime }) =&gt; {&#10;              const minutes = String(Math.floor(remainingTime / 60)).padStart(&#10;                2,&#10;                &quot;0&quot;,&#10;              );&#10;              const seconds = String(remainingTime % 60).padStart(2, &quot;0&quot;);&#10;              return (&#10;                &lt;Text className=&quot;text-[40px] font-bold text-[#0C051A]&quot;&gt;&#10;                  {minutes}:{seconds}&#10;                &lt;/Text&gt;&#10;              );&#10;            }}&#10;          &lt;/CountdownCircleTimer&gt;&#10;&#10;          &lt;View className=&quot;flex flex-row items-center justify-center mt-8&quot;&gt;&#10;            &lt;View className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center mr-4 &quot;&gt;&#10;              &lt;Image&#10;                source={icons.pause}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Pause&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;View className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center mr-4 &quot;&gt;&#10;              &lt;Image&#10;                source={icons.quit}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Quit&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;        {/* Removed the old Pause/Quit button view from below */}&#10;&#10;        {/*&lt;Text className=&quot;text-5xl font-bold text-blue-700 mb-6&quot;&gt;*/}&#10;        {/*  {formatTime(seconds)}*/}&#10;        {/*&lt;/Text&gt;*/}&#10;&#10;        {/*&lt;TouchableOpacity*/}&#10;        {/*  className={`px-6 py-3 rounded-full ${*/}&#10;        {/*    isRunning ? &quot;bg-red-500&quot; : &quot;bg-green-500&quot;*/}&#10;        {/*  }`}*/}&#10;        {/*  onPress={() =&gt; setIsRunning((prev) =&gt; !prev)}*/}&#10;        {/*&gt;*/}&#10;        {/*  &lt;Text className=&quot;text-white text-lg font-semibold&quot;&gt;*/}&#10;        {/*    {isRunning ? &quot;Stop&quot; : &quot;Start&quot;}*/}&#10;        {/*  &lt;/Text&gt;*/}&#10;        {/*&lt;/TouchableOpacity&gt;*/}&#10;&#10;        {/*&lt;TouchableOpacity*/}&#10;        {/*  className=&quot;mt-4 px-6 py-3 bg-gray-800 rounded-full&quot;*/}&#10;        {/*  onPress={() =&gt; {*/}&#10;        {/*    setIsRunning(false);*/}&#10;        {/*    setSeconds(0);*/}&#10;        {/*  }}*/}&#10;        {/*&gt;*/}&#10;        {/*  &lt;Text className=&quot;text-white text-lg font-semibold&quot;&gt;Reset&lt;/Text&gt;*/}&#10;        {/*&lt;/TouchableOpacity&gt;*/}&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState, useRef } from &quot;react&quot;;&#10;import { View, Text, TouchableOpacity, Image } from &quot;react-native&quot;;&#10;import { icons } from &quot;@/constants&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { CountdownCircleTimer } from &quot;react-native-countdown-circle-timer&quot;;&#10;&#10;export default function TimerPage() {&#10;  const [seconds, setSeconds] = useState(0);&#10;  const [isRunning, setIsRunning] = useState(false);&#10;  const intervalRef = useRef&lt;number | null&gt;(null);&#10;  const [Exercise, SetExercise] = useState(&quot;Exercise&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isRunning) {&#10;      intervalRef.current = setInterval(() =&gt; {&#10;        setSeconds((prev) =&gt; prev + 1);&#10;      }, 1000);&#10;    } else if (intervalRef.current) {&#10;      clearInterval(intervalRef.current);&#10;    }&#10;&#10;    return () =&gt; {&#10;      if (intervalRef.current) clearInterval(intervalRef.current);&#10;    };&#10;  }, [isRunning]);&#10;&#10;  const formatTime = (totalSeconds: number) =&gt; {&#10;    const mins = Math.floor(totalSeconds / 60)&#10;      .toString()&#10;      .padStart(2, &quot;0&quot;);&#10;    const secs = (totalSeconds % 60).toString().padStart(2, &quot;0&quot;);&#10;    return `${mins}:${secs}`;&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center &quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot; w-full h-[80px] bg-white rounded-full shadow-md shadow-neutral-400/70 justify-center mt-5&quot;&gt;&#10;          &lt;Image&#10;            source={icons.backArrow}&#10;            resizeMode=&quot;contain&quot;&#10;            className=&quot;w-[30px] h-[30px] absolute top-[40px] left-8&quot;&#10;          /&gt;&#10;          &lt;Text className=&quot;text-black text-[30px] text-center font-bold   &quot;&gt;&#10;            Timer&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;justify-center w-full h-[38px] mt-8&quot;&gt;&#10;          &lt;Text className=&quot;text-[30px] text-general-1000 font-bold text-center&quot;&gt;&#10;            {Exercise}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 items-center justify-center bg-white&quot;&gt;&#10;          &lt;CountdownCircleTimer&#10;            isPlaying&#10;            duration={30}&#10;            colors={[&quot;#FC713A&quot;]}&#10;            trailColor=&quot;#EAE8FF&quot;&#10;            size={220}&#10;            strokeWidth={18}&#10;          &gt;&#10;            {({ remainingTime }) =&gt; {&#10;              const minutes = String(Math.floor(remainingTime / 60)).padStart(&#10;                2,&#10;                &quot;0&quot;,&#10;              );&#10;              const seconds = String(remainingTime % 60).padStart(2, &quot;0&quot;);&#10;              return (&#10;                &lt;Text className=&quot;text-[40px] font-bold text-[#0C051A]&quot;&gt;&#10;                  {minutes}:{seconds}&#10;                &lt;/Text&gt;&#10;              );&#10;            }}&#10;          &lt;/CountdownCircleTimer&gt;&#10;&#10;          &lt;View className=&quot;flex flex-row items-center justify-center mt-8&quot;&gt;&#10;            &lt;View className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center mr-8&quot;&gt;&#10;              &lt;Image&#10;                source={icons.pause}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Pause&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;            &lt;View className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center&quot;&gt;&#10;              &lt;Image&#10;                source={icons.quit}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Quit&lt;/Text&gt;&#10;            &lt;/View&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;        {/* Removed the old Pause/Quit button view from below */}&#10;&#10;        {/*&lt;Text className=&quot;text-5xl font-bold text-blue-700 mb-6&quot;&gt;*/}&#10;        {/*  {formatTime(seconds)}*/}&#10;        {/*&lt;/Text&gt;*/}&#10;&#10;        {/*&lt;TouchableOpacity*/}&#10;        {/*  className={`px-6 py-3 rounded-full ${*/}&#10;        {/*    isRunning ? &quot;bg-red-500&quot; : &quot;bg-green-500&quot;*/}&#10;        {/*  }`}*/}&#10;        {/*  onPress={() =&gt; setIsRunning((prev) =&gt; !prev)}*/}&#10;        {/*&gt;*/}&#10;        {/*  &lt;Text className=&quot;text-white text-lg font-semibold&quot;&gt;*/}&#10;        {/*    {isRunning ? &quot;Stop&quot; : &quot;Start&quot;}*/}&#10;        {/*  &lt;/Text&gt;*/}&#10;        {/*&lt;/TouchableOpacity&gt;*/}&#10;&#10;        {/*&lt;TouchableOpacity*/}&#10;        {/*  className=&quot;mt-4 px-6 py-3 bg-gray-800 rounded-full&quot;*/}&#10;        {/*  onPress={() =&gt; {*/}&#10;        {/*    setIsRunning(false);*/}&#10;        {/*    setSeconds(0);*/}&#10;        {/*  }}*/}&#10;        {/*&gt;*/}&#10;        {/*  &lt;Text className=&quot;text-white text-lg font-semibold&quot;&gt;Reset&lt;/Text&gt;*/}&#10;        {/*&lt;/TouchableOpacity&gt;*/}&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>