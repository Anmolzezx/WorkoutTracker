<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/(tabs)/detail.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(tabs)/detail.tsx" />
              <option name="originalContent" value="import { Image, Text, TouchableOpacity, View, FlatList } from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { icons, images, exercises } from &quot;@/constants&quot;;&#10;import { auth } from &quot;@/lib/firebase&quot;;&#10;import { router } from &quot;expo-router&quot;;&#10;import React from &quot;react&quot;;&#10;&#10;const Detail = () =&gt; {&#10;  const email = auth.currentUser?.email;&#10;  const username = email ? email.split(&quot;@&quot;)[0] : &quot;User&quot;;&#10;&#10;  const startWorkout = () =&gt; {&#10;    router.navigate({&#10;      pathname: &quot;/timerPage&quot;,&#10;      params: {&#10;        exercises: JSON.stringify(exercises),&#10;        workoutName: &quot;All Exercises&quot;,&#10;      },&#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white &quot;&gt;&#10;      &lt;View className=&quot;flex absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[137px] mb-2&quot;&gt;&#10;          &lt;Image&#10;            source={images.homeHeader}&#10;            resizeMode=&quot;cover&quot;&#10;            className=&quot;w-full h-[160px]&quot;&#10;          /&gt;&#10;          &lt;Image&#10;            source={images.animoji}&#10;            resizeMode=&quot;contain&quot;&#10;            className=&quot;w-[84px] h-[84px] absolute top-[32px] left-4&quot;&#10;          /&gt;&#10;          &lt;Text className=&quot;text-[24px] font-bold text-white absolute top-[50px] left-[110px]&quot;&gt;&#10;            Hello{&quot;\n&quot;}&#10;            {username}&#10;          &lt;/Text&gt;&#10;          &lt;View className=&quot;w-[54px] h-[54px] absolute top-[50px] right-[20px] rounded-full bg-white items-center justify-center shadow&quot;&gt;&#10;            &lt;Image&#10;              source={icons.logOut}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[24px] h-[20px]&quot;&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 bg-white px-4 pt-2 pb-0&quot;&gt;&#10;          &lt;Text className=&quot;text-[32px] font-bold mb-4 text-center text-general-1000&quot;&gt;&#10;            Exercises&#10;          &lt;/Text&gt;&#10;          &lt;FlatList&#10;            data={exercises}&#10;            keyExtractor={(item, idx) =&gt; idx.toString()}&#10;            showsVerticalScrollIndicator={false}&#10;            contentContainerStyle={{ paddingBottom: 32 }}&#10;            renderItem={({ item }) =&gt; (&#10;              &lt;View className=&quot;mb-3 px-5 py-4 bg-secondary-1000 rounded-2xl shadow flex-row items-center&quot;&gt;&#10;                &lt;View className=&quot;w-4 h-4 rounded-full bg-general-1000 mr-4&quot; /&gt;&#10;                &lt;Text className=&quot;text-[18px] font-semibold text-black&quot;&gt;&#10;                  {item}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            )}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;&#10;        &lt;View className=&quot;absolute left-0 right-0 items-center bottom-[90px] bg-transparent&quot;&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={startWorkout}&#10;            className=&quot;bg-general-1000 rounded-full w-[90px] h-[90px] items-center justify-center shadow-lg mb-4&quot;&#10;            activeOpacity={0.85}&#10;            style={{&#10;              shadowColor: &quot;#FC713A&quot;,&#10;              shadowOffset: { width: 0, height: 8 },&#10;              shadowOpacity: 0.25,&#10;              shadowRadius: 16,&#10;              elevation: 8,&#10;            }}&#10;          &gt;&#10;            &lt;Text className=&quot;text-white font-extrabold text-[22px] tracking-wide uppercase&quot;&gt;&#10;              Start&#10;            &lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;};&#10;export default Detail;&#10;" />
              <option name="updatedContent" value="import { Image, Text, TouchableOpacity, View, FlatList } from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { icons, images, exercises } from &quot;@/constants&quot;;&#10;import { auth } from &quot;@/lib/firebase&quot;;&#10;import { router } from &quot;expo-router&quot;;&#10;import React from &quot;react&quot;;&#10;&#10;const Detail = () =&gt; {&#10;  const email = auth.currentUser?.email;&#10;  const username = email ? email.split(&quot;@&quot;)[0] : &quot;User&quot;;&#10;&#10;  const startWorkout = () =&gt; {&#10;    router.navigate({&#10;      pathname: &quot;/timerPage&quot;,&#10;      params: {&#10;        exercises: JSON.stringify(exercises),&#10;        workoutName: &quot;All Exercises&quot;,&#10;      },&#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white &quot;&gt;&#10;      &lt;View className=&quot;flex absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[137px] mb-2&quot;&gt;&#10;          &lt;Image&#10;            source={images.homeHeader}&#10;            resizeMode=&quot;cover&quot;&#10;            className=&quot;w-full h-[160px]&quot;&#10;          /&gt;&#10;          &lt;Image&#10;            source={images.animoji}&#10;            resizeMode=&quot;contain&quot;&#10;            className=&quot;w-[84px] h-[84px] absolute top-[32px] left-4&quot;&#10;          /&gt;&#10;          &lt;Text className=&quot;text-[24px] font-bold text-white absolute top-[50px] left-[110px]&quot;&gt;&#10;            Hello{&quot;\n&quot;}&#10;            {username}&#10;          &lt;/Text&gt;&#10;          &lt;View className=&quot;w-[54px] h-[54px] absolute top-[50px] right-[20px] rounded-full bg-white items-center justify-center shadow&quot;&gt;&#10;            &lt;Image&#10;              source={icons.logOut}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[24px] h-[20px]&quot;&#10;            /&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 bg-white px-4 pt-2 pb-0&quot;&gt;&#10;          &lt;Text className=&quot;text-[32px] font-bold mb-4 text-center text-general-1000&quot;&gt;&#10;            Exercises&#10;          &lt;/Text&gt;&#10;          &lt;FlatList&#10;            data={exercises}&#10;            keyExtractor={(item, idx) =&gt; idx.toString()}&#10;            showsVerticalScrollIndicator={false}&#10;            contentContainerStyle={{ paddingBottom: 32 }}&#10;            renderItem={({ item }) =&gt; (&#10;              &lt;View className=&quot;mb-3 px-5 py-4 bg-secondary-1000 rounded-2xl shadow flex-row items-center&quot;&gt;&#10;                &lt;View className=&quot;w-4 h-4 rounded-full bg-general-1000 mr-4&quot; /&gt;&#10;                &lt;Text className=&quot;text-[18px] font-semibold text-black&quot;&gt;&#10;                  {item}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            )}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;&#10;        &lt;View className=&quot;absolute left-0 right-0 items-center bottom-[90px] bg-transparent&quot;&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={startWorkout}&#10;            className=&quot;bg-general-1000 rounded-full w-[90px] h-[90px] items-center justify-center shadow-lg mb-4&quot;&#10;            activeOpacity={0.85}&#10;            style={{&#10;              shadowColor: &quot;#FC713A&quot;,&#10;              shadowOffset: { width: 0, height: 8 },&#10;              shadowOpacity: 0.25,&#10;              shadowRadius: 16,&#10;              elevation: 8,&#10;            }}&#10;          &gt;&#10;            &lt;Text className=&quot;text-white font-extrabold text-[22px] tracking-wide uppercase&quot;&gt;&#10;              Start&#10;            &lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;};&#10;export default Detail;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/(tabs)/history.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(tabs)/history.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from &quot;react&quot;;&#10;import { View, Text, FlatList, TouchableOpacity } from &quot;react-native&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;&#10;function formatDateTime(dateStr: string) {&#10;  const d = new Date(dateStr);&#10;  return (&#10;    d.toLocaleDateString(undefined, {&#10;      weekday: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;    }) +&#10;    &quot; &quot; +&#10;    d.toLocaleTimeString(undefined, {&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    })&#10;  );&#10;}&#10;&#10;const History = () =&gt; {&#10;  const [history, setHistory] = useState&lt;&#10;    { date: string; exercise: string; workoutName: string }[]&#10;  &gt;([]);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchHistory = async () =&gt; {&#10;      try {&#10;        const data = await AsyncStorage.getItem(&quot;workoutHistory&quot;);&#10;        if (data) {&#10;          const parsed = JSON.parse(data);&#10;          parsed.sort((a: any, b: any) =&gt; (a.date &lt; b.date ? 1 : -1));&#10;          setHistory(parsed);&#10;        }&#10;      } catch {}&#10;    };&#10;    fetchHistory();&#10;  }, []);&#10;&#10;  const clearHistory = async () =&gt; {&#10;    await AsyncStorage.removeItem(&quot;workoutHistory&quot;);&#10;    setHistory([]);&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white&quot;&gt;&#10;      &lt;View className=&quot;flex-1 bg-white p-4&quot;&gt;&#10;        &lt;View className=&quot;flex-row justify-between items-center mb-4&quot;&gt;&#10;          &lt;Text className=&quot;text-[28px] font-bold&quot;&gt;Exercise History&lt;/Text&gt;&#10;          &lt;TouchableOpacity onPress={clearHistory}&gt;&#10;            &lt;Text&#10;              className=&quot;text-blue-600 text-base&quot;&#10;              style={{ textDecorationLine: &quot;underline&quot; }}&#10;            &gt;&#10;              Clear&#10;            &lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;        {history.length === 0 ? (&#10;          &lt;Text className=&quot;text-gray-400 mt-8 text-center&quot;&gt;&#10;            No exercises completed yet.&#10;          &lt;/Text&gt;&#10;        ) : (&#10;          &lt;FlatList&#10;            data={history}&#10;            keyExtractor={(_, idx) =&gt; idx.toString()}&#10;            showsVerticalScrollIndicator={false}&#10;            contentContainerStyle={{ paddingBottom: 24 }}&#10;            renderItem={({ item }) =&gt; (&#10;              &lt;View&#10;                className=&quot;mb-3 bg-white rounded-xl shadow p-4 border border-gray-100&quot;&#10;                style={{&#10;                  shadowColor: &quot;#000&quot;,&#10;                  shadowOpacity: 0.06,&#10;                  shadowRadius: 6,&#10;                  elevation: 1,&#10;                }}&#10;              &gt;&#10;                &lt;Text className=&quot;text-[16px] font-bold text-blue-700 mb-1&quot;&gt;&#10;                  {formatDateTime(item.date)}&#10;                &lt;/Text&gt;&#10;                &lt;Text className=&quot;text-[15px] text-gray-800 font-semibold&quot;&gt;&#10;                  {item.workoutName}&#10;                &lt;/Text&gt;&#10;                &lt;Text className=&quot;text-[15px] text-gray-600 ml-1 mt-1&quot;&gt;&#10;                  • {item.exercise}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            )}&#10;          /&gt;&#10;        )}&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;};&#10;&#10;export default History;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from &quot;react&quot;;&#10;import { View, Text, FlatList, TouchableOpacity } from &quot;react-native&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;&#10;function formatDateTime(dateStr: string) {&#10;  const d = new Date(dateStr);&#10;  return (&#10;    d.toLocaleDateString(undefined, {&#10;      weekday: &quot;short&quot;,&#10;      day: &quot;numeric&quot;,&#10;      month: &quot;short&quot;,&#10;    }) +&#10;    &quot; &quot; +&#10;    d.toLocaleTimeString(undefined, {&#10;      hour: &quot;2-digit&quot;,&#10;      minute: &quot;2-digit&quot;,&#10;    })&#10;  );&#10;}&#10;&#10;const History = () =&gt; {&#10;  const [history, setHistory] = useState&lt;&#10;    { date: string; exercise: string; workoutName: string }[]&#10;  &gt;([]);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchHistory = async () =&gt; {&#10;      try {&#10;        const data = await AsyncStorage.getItem(&quot;workoutHistory&quot;);&#10;        if (data) {&#10;          const parsed = JSON.parse(data);&#10;          parsed.sort((a: any, b: any) =&gt; (a.date &lt; b.date ? 1 : -1));&#10;          setHistory(parsed);&#10;        }&#10;      } catch {}&#10;    };&#10;    fetchHistory();&#10;  }, []);&#10;&#10;  const clearHistory = async () =&gt; {&#10;    await AsyncStorage.removeItem(&quot;workoutHistory&quot;);&#10;    setHistory([]);&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white&quot;&gt;&#10;      &lt;View className=&quot;flex-1 bg-white p-4&quot;&gt;&#10;        &lt;View className=&quot;flex-row justify-between items-center mb-4&quot;&gt;&#10;          &lt;Text className=&quot;text-[28px] font-bold&quot;&gt;Exercise History&lt;/Text&gt;&#10;          &lt;TouchableOpacity onPress={clearHistory}&gt;&#10;            &lt;Text&#10;              className=&quot;text-blue-600 text-base&quot;&#10;              style={{ textDecorationLine: &quot;underline&quot; }}&#10;            &gt;&#10;              Clear&#10;            &lt;/Text&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;        {history.length === 0 ? (&#10;          &lt;Text className=&quot;text-gray-400 mt-8 text-center&quot;&gt;&#10;            No exercises completed yet.&#10;          &lt;/Text&gt;&#10;        ) : (&#10;          &lt;FlatList&#10;            data={history}&#10;            keyExtractor={(_, idx) =&gt; idx.toString()}&#10;            showsVerticalScrollIndicator={false}&#10;            contentContainerStyle={{ paddingBottom: 24 }}&#10;            renderItem={({ item }) =&gt; (&#10;              &lt;View&#10;                className=&quot;mb-3 bg-white rounded-xl shadow p-4 border border-gray-100&quot;&#10;                style={{&#10;                  shadowColor: &quot;#000&quot;,&#10;                  shadowOpacity: 0.06,&#10;                  shadowRadius: 6,&#10;                  elevation: 1,&#10;                }}&#10;              &gt;&#10;                &lt;Text className=&quot;text-[16px] font-bold text-blue-700 mb-1&quot;&gt;&#10;                  {formatDateTime(item.date)}&#10;                &lt;/Text&gt;&#10;                &lt;Text className=&quot;text-[15px] text-gray-800 font-semibold&quot;&gt;&#10;                  {item.workoutName}&#10;                &lt;/Text&gt;&#10;                &lt;Text className=&quot;text-[15px] text-gray-600 ml-1 mt-1&quot;&gt;&#10;                  • {item.exercise}&#10;                &lt;/Text&gt;&#10;              &lt;/View&gt;&#10;            )}&#10;          /&gt;&#10;        )}&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;};&#10;&#10;export default History;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/(tabs)/home.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(tabs)/home.tsx" />
              <option name="originalContent" value="import {&#10;  View,&#10;  Text,&#10;  Image,&#10;  TouchableOpacity,&#10;  Alert,&#10;  FlatList,&#10;} from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { icons, images, workouts } from &quot;@/constants&quot;;&#10;import { auth } from &quot;@/lib/firebase&quot;;&#10;import { router } from &quot;expo-router&quot;;&#10;import { signOut } from &quot;firebase/auth&quot;;&#10;import React from &quot;react&quot;;&#10;&#10;export default function HomeScreen() {&#10;  const email = auth.currentUser?.email;&#10;  const username = email ? email.split(&quot;@&quot;)[0] : &quot;User&quot;;&#10;  const timer = (item: (typeof workouts)[0]) =&gt;&#10;    router.navigate({&#10;      pathname: &quot;/timerPage&quot;,&#10;      params: {&#10;        exercises: JSON.stringify(item.exercises),&#10;        workoutName: item.name,&#10;      },&#10;    });&#10;  const logout = () =&gt; {&#10;    signOut(auth)&#10;      .then(() =&gt; {&#10;        Alert.alert(&quot;Success&quot;, &quot;You are logged out&quot;);&#10;        router.replace(&quot;/welcome&quot;);&#10;      })&#10;      .catch((err) =&gt; {&#10;        Alert.alert(&quot;Error&quot;, err.message);&#10;      });&#10;  };&#10;&#10;  const renderWorkout = ({ item }: { item: (typeof workouts)[0] }) =&gt; (&#10;    &lt;View className=&quot;flex bg-secondary-1000 W-[363px] h-[164px] rounded-[65px] mt-8 mr-4 ml-4 &quot;&gt;&#10;      &lt;View className=&quot;justify-center items-center&quot;&gt;&#10;        &lt;Text className=&quot;text-black text-[24px] font-bold &quot;&gt;{item.name}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;View className=&quot;items-start ml-[45px]&quot;&gt;&#10;        &lt;Text className=&quot;text-[30px] font-bold text-general-1000 &quot;&gt;&#10;          Exercise&#10;        &lt;/Text&gt;&#10;        &lt;Text className=&quot;text-black text-[24px] font-extrabold&quot;&gt;&#10;          {item.exercises.join(&quot;\n&quot;)}&#10;        &lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;TouchableOpacity&#10;        onPress={() =&gt; timer(item)}&#10;        className=&quot;absolute bottom-0 right-0 mr-5 mb-4 bg-general-1000 rounded-full w-[73px] h-[73px] items-center justify-center&quot;&#10;      &gt;&#10;        &lt;Text className=&quot;text-white font-bold text-[24px] &quot;&gt;Start&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center justify-between&quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[137px]&quot;&gt;&#10;          &lt;Image&#10;            source={images.homeHeader}&#10;            resizeMode=&quot;cover&quot;&#10;            className=&quot;w-full h-[160px]&quot;&#10;          /&gt;&#10;          &lt;Image&#10;            source={images.animoji}&#10;            resizeMode=&quot;contain&quot;&#10;            className=&quot;w-[84px] h-[84px] absolute top-[32px] left-4&quot;&#10;          /&gt;&#10;          &lt;Text className=&quot;text-[24px] font-bold text-white text-left absolute top-[50px] left-[110px]&quot;&gt;&#10;            Hello{&quot;\n&quot;}&#10;            {username}&#10;          &lt;/Text&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={logout}&#10;            className=&quot;w-[54px] h-[54px] absolute top-[50px] right-[20px] rounded-full bg-white items-center justify-center&quot;&#10;          &gt;&#10;            &lt;Image&#10;              source={icons.logOut}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[24px] h-[20px]&quot;&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex flex-col bg-white p-3&quot;&gt;&#10;          &lt;FlatList&#10;            data={workouts}&#10;            renderItem={renderWorkout}&#10;            keyExtractor={(item) =&gt; item.id}&#10;            showsVerticalScrollIndicator={false}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import {&#10;  View,&#10;  Text,&#10;  Image,&#10;  TouchableOpacity,&#10;  Alert,&#10;  FlatList,&#10;} from &quot;react-native&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { icons, images, workouts } from &quot;@/constants&quot;;&#10;import { auth } from &quot;@/lib/firebase&quot;;&#10;import { router } from &quot;expo-router&quot;;&#10;import { signOut } from &quot;firebase/auth&quot;;&#10;import React from &quot;react&quot;;&#10;&#10;export default function HomeScreen() {&#10;  const email = auth.currentUser?.email;&#10;  const username = email ? email.split(&quot;@&quot;)[0] : &quot;User&quot;;&#10;  const timer = (item: (typeof workouts)[0]) =&gt;&#10;    router.navigate({&#10;      pathname: &quot;/timerPage&quot;,&#10;      params: {&#10;        exercises: JSON.stringify(item.exercises),&#10;        workoutName: item.name,&#10;      },&#10;    });&#10;  const logout = () =&gt; {&#10;    signOut(auth)&#10;      .then(() =&gt; {&#10;        Alert.alert(&quot;Success&quot;, &quot;You are logged out&quot;);&#10;        router.replace(&quot;/welcome&quot;);&#10;      })&#10;      .catch((err) =&gt; {&#10;        Alert.alert(&quot;Error&quot;, err.message);&#10;      });&#10;  };&#10;&#10;  const renderWorkout = ({ item }: { item: (typeof workouts)[0] }) =&gt; (&#10;    &lt;View className=&quot;flex bg-secondary-1000 W-[363px] h-[164px] rounded-[65px] mt-8 mr-4 ml-4 &quot;&gt;&#10;      &lt;View className=&quot;justify-center items-center&quot;&gt;&#10;        &lt;Text className=&quot;text-black text-[24px] font-bold &quot;&gt;{item.name}&lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;View className=&quot;items-start ml-[45px]&quot;&gt;&#10;        &lt;Text className=&quot;text-[30px] font-bold text-general-1000 &quot;&gt;&#10;          Exercise&#10;        &lt;/Text&gt;&#10;        &lt;Text className=&quot;text-black text-[24px] font-extrabold&quot;&gt;&#10;          {item.exercises.join(&quot;\n&quot;)}&#10;        &lt;/Text&gt;&#10;      &lt;/View&gt;&#10;      &lt;TouchableOpacity&#10;        onPress={() =&gt; timer(item)}&#10;        className=&quot;absolute bottom-0 right-0 mr-5 mb-4 bg-general-1000 rounded-full w-[73px] h-[73px] items-center justify-center&quot;&#10;      &gt;&#10;        &lt;Text className=&quot;text-white font-bold text-[24px] &quot;&gt;Start&lt;/Text&gt;&#10;      &lt;/TouchableOpacity&gt;&#10;    &lt;/View&gt;&#10;  );&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center justify-between&quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[137px]&quot;&gt;&#10;          &lt;Image&#10;            source={images.homeHeader}&#10;            resizeMode=&quot;cover&quot;&#10;            className=&quot;w-full h-[160px]&quot;&#10;          /&gt;&#10;          &lt;Image&#10;            source={images.animoji}&#10;            resizeMode=&quot;contain&quot;&#10;            className=&quot;w-[84px] h-[84px] absolute top-[32px] left-4&quot;&#10;          /&gt;&#10;          &lt;Text className=&quot;text-[24px] font-bold text-white text-left absolute top-[50px] left-[110px]&quot;&gt;&#10;            Hello{&quot;\n&quot;}&#10;            {username}&#10;          &lt;/Text&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={logout}&#10;            className=&quot;w-[54px] h-[54px] absolute top-[50px] right-[20px] rounded-full bg-white items-center justify-center&quot;&#10;          &gt;&#10;            &lt;Image&#10;              source={icons.logOut}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[24px] h-[20px]&quot;&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex flex-col bg-white p-3&quot;&gt;&#10;          &lt;FlatList&#10;            data={workouts}&#10;            renderItem={renderWorkout}&#10;            keyExtractor={(item) =&gt; item.id}&#10;            showsVerticalScrollIndicator={false}&#10;          /&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/timerPage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/timerPage.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState, useRef } from &quot;react&quot;;&#10;import { View, Text, TouchableOpacity, Image, Vibration } from &quot;react-native&quot;;&#10;import { icons } from &quot;@/constants&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { CountdownCircleTimer } from &quot;react-native-countdown-circle-timer&quot;;&#10;import { router, useLocalSearchParams } from &quot;expo-router&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;&#10;const EXERCISE_DURATION = 5;&#10;&#10;export default function TimerPage() {&#10;  const params = useLocalSearchParams();&#10;  const exercises: string[] = params.exercises&#10;    ? JSON.parse(params.exercises as string)&#10;    : [&quot;Exercise&quot;];&#10;&#10;  const workoutName: string = params.workoutName&#10;    ? String(params.workoutName)&#10;    : &quot;Workout&quot;;&#10;  const [exerciseIdx, setExerciseIdx] = useState(0);&#10;  const [isPlaying, setIsPlaying] = useState(true);&#10;&#10;  const handleComplete = () =&gt; {&#10;    Vibration.vibrate(100);&#10;    if (exerciseIdx &lt; exercises.length - 1) {&#10;      setExerciseIdx((idx) =&gt; idx + 1);&#10;      setIsPlaying(false);&#10;      setTimeout(() =&gt; setIsPlaying(true), 300);&#10;      return { shouldRepeat: false };&#10;    } else {&#10;      (async () =&gt; {&#10;        const today = new Date().toISOString().slice(0, 10);&#10;        const entries = exercises.map((exercise) =&gt; ({&#10;          exercise,&#10;          workoutName,&#10;          date: today,&#10;        }));&#10;        try {&#10;          const prev = await AsyncStorage.getItem(&quot;workoutHistory&quot;);&#10;          const history = prev ? JSON.parse(prev) : [];&#10;          await AsyncStorage.setItem(&#10;            &quot;workoutHistory&quot;,&#10;            JSON.stringify([...history, ...entries]),&#10;          );&#10;        } catch {}&#10;        router.replace({ pathname: &quot;/(tabs)/history&quot; });&#10;      })();&#10;      return { shouldRepeat: false };&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center &quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[80px] bg-white rounded-full shadow-md shadow-neutral-400/70 justify-center mt-5&quot;&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={() =&gt; {&#10;              if (router.canGoBack?.()) {&#10;                router.back();&#10;              } else {&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }&#10;            }}&#10;            className=&quot;absolute top-[10px] left-8 z-10&quot;&#10;          &gt;&#10;            &lt;Image&#10;              source={icons.backArrow}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[30px] h-[30px]&quot;&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;Text className=&quot;text-black text-[30px] text-center font-bold&quot;&gt;&#10;            {workoutName}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;justify-center w-full h-[38px] mt-8&quot;&gt;&#10;          &lt;Text className=&quot;text-[30px] text-general-1000 font-bold text-center&quot;&gt;&#10;            {exercises[exerciseIdx]}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 items-center justify-center bg-white mt-4&quot;&gt;&#10;          &lt;CountdownCircleTimer&#10;            isPlaying={isPlaying}&#10;            duration={EXERCISE_DURATION}&#10;            key={exerciseIdx}&#10;            colors=&quot;#FC713A&quot;&#10;            trailColor=&quot;#EAE8FF&quot;&#10;            size={220}&#10;            strokeWidth={18}&#10;            onComplete={handleComplete}&#10;          &gt;&#10;            {({ remainingTime }) =&gt; {&#10;              const minutes = String(Math.floor(remainingTime / 60)).padStart(&#10;                2,&#10;                &quot;0&quot;,&#10;              );&#10;              const seconds = String(remainingTime % 60).padStart(2, &quot;0&quot;);&#10;              return (&#10;                &lt;Text className=&quot;text-[40px] font-bold text-[#0C051A]&quot;&gt;&#10;                  {minutes}:{seconds}&#10;                &lt;/Text&gt;&#10;              );&#10;            }}&#10;          &lt;/CountdownCircleTimer&gt;&#10;          &lt;View className=&quot;flex flex-row items-center justify-center mt-8&quot;&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                setIsPlaying((p) =&gt; !p);&#10;                Vibration.vibrate(10);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center mr-8 &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.pause}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;&#10;                {isPlaying ? &quot;Pause&quot; : &quot;Resume&quot;}&#10;              &lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                Vibration.vibrate(10);&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.quit}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Quit&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState, useRef } from &quot;react&quot;;&#10;import { View, Text, TouchableOpacity, Image, Vibration } from &quot;react-native&quot;;&#10;import { icons } from &quot;@/constants&quot;;&#10;import { SafeAreaView } from &quot;react-native-safe-area-context&quot;;&#10;import { CountdownCircleTimer } from &quot;react-native-countdown-circle-timer&quot;;&#10;import { router, useLocalSearchParams } from &quot;expo-router&quot;;&#10;import AsyncStorage from &quot;@react-native-async-storage/async-storage&quot;;&#10;&#10;const EXERCISE_DURATION = 5;&#10;&#10;export default function TimerPage() {&#10;  const params = useLocalSearchParams();&#10;  const exercises: string[] = params.exercises&#10;    ? JSON.parse(params.exercises as string)&#10;    : [&quot;Exercise&quot;];&#10;&#10;  const workoutName: string = params.workoutName&#10;    ? String(params.workoutName)&#10;    : &quot;Workout&quot;;&#10;  const [exerciseIdx, setExerciseIdx] = useState(0);&#10;  const [isPlaying, setIsPlaying] = useState(true);&#10;&#10;  const handleComplete = () =&gt; {&#10;    Vibration.vibrate(100);&#10;    if (exerciseIdx &lt; exercises.length - 1) {&#10;      setExerciseIdx((idx) =&gt; idx + 1);&#10;      setIsPlaying(false);&#10;      setTimeout(() =&gt; setIsPlaying(true), 300);&#10;      return { shouldRepeat: false };&#10;    } else {&#10;      (async () =&gt; {&#10;        const today = new Date().toISOString().slice(0, 10);&#10;        const entries = exercises.map((exercise) =&gt; ({&#10;          exercise,&#10;          workoutName,&#10;          date: today,&#10;        }));&#10;        try {&#10;          const prev = await AsyncStorage.getItem(&quot;workoutHistory&quot;);&#10;          const history = prev ? JSON.parse(prev) : [];&#10;          await AsyncStorage.setItem(&#10;            &quot;workoutHistory&quot;,&#10;            JSON.stringify([...history, ...entries]),&#10;          );&#10;        } catch {}&#10;        router.replace({ pathname: &quot;/(tabs)/history&quot; });&#10;      })();&#10;      return { shouldRepeat: false };&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;SafeAreaView className=&quot;flex-1 bg-white items-center &quot;&gt;&#10;      &lt;View className=&quot;flex flex-col absolute top-0 bottom-0 left-0 right-0&quot;&gt;&#10;        &lt;View className=&quot;w-full h-[80px] bg-white rounded-full shadow-md shadow-neutral-400/70 justify-center mt-5&quot;&gt;&#10;          &lt;TouchableOpacity&#10;            onPress={() =&gt; {&#10;              if (router.canGoBack?.()) {&#10;                router.back();&#10;              } else {&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }&#10;            }}&#10;            className=&quot;absolute top-[10px] left-8 z-10&quot;&#10;          &gt;&#10;            &lt;Image&#10;              source={icons.backArrow}&#10;              resizeMode=&quot;contain&quot;&#10;              className=&quot;w-[30px] h-[30px]&quot;&#10;            /&gt;&#10;          &lt;/TouchableOpacity&gt;&#10;          &lt;Text className=&quot;text-black text-[30px] text-center font-bold&quot;&gt;&#10;            {workoutName}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;justify-center w-full h-[38px] mt-8&quot;&gt;&#10;          &lt;Text className=&quot;text-[30px] text-general-1000 font-bold text-center&quot;&gt;&#10;            {exercises[exerciseIdx]}&#10;          &lt;/Text&gt;&#10;        &lt;/View&gt;&#10;        &lt;View className=&quot;flex-1 items-center justify-center bg-white mt-4&quot;&gt;&#10;          &lt;CountdownCircleTimer&#10;            isPlaying={isPlaying}&#10;            duration={EXERCISE_DURATION}&#10;            key={exerciseIdx}&#10;            colors=&quot;#FC713A&quot;&#10;            trailColor=&quot;#EAE8FF&quot;&#10;            size={220}&#10;            strokeWidth={18}&#10;            onComplete={handleComplete}&#10;          &gt;&#10;            {({ remainingTime }) =&gt; {&#10;              const minutes = String(Math.floor(remainingTime / 60)).padStart(&#10;                2,&#10;                &quot;0&quot;,&#10;              );&#10;              const seconds = String(remainingTime % 60).padStart(2, &quot;0&quot;);&#10;              return (&#10;                &lt;Text className=&quot;text-[40px] font-bold text-[#0C051A]&quot;&gt;&#10;                  {minutes}:{seconds}&#10;                &lt;/Text&gt;&#10;              );&#10;            }}&#10;          &lt;/CountdownCircleTimer&gt;&#10;          &lt;View className=&quot;flex flex-row items-center justify-center mt-8&quot;&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                setIsPlaying((p) =&gt; !p);&#10;                Vibration.vibrate(10);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center mr-8 &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.pause}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;&#10;                {isPlaying ? &quot;Pause&quot; : &quot;Resume&quot;}&#10;              &lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;            &lt;TouchableOpacity&#10;              onPress={() =&gt; {&#10;                Vibration.vibrate(10);&#10;                router.replace(&quot;/(tabs)/home&quot;);&#10;              }}&#10;              className=&quot;w-[60px] h-[60px] rounded-full bg-white items-center justify-center &quot;&#10;            &gt;&#10;              &lt;Image&#10;                source={icons.quit}&#10;                resizeMode=&quot;contain&quot;&#10;                className=&quot;w-[60px] h-[60px]&quot;&#10;              /&gt;&#10;              &lt;Text className=&quot;text-black text-[14px]&quot;&gt;Quit&lt;/Text&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          &lt;/View&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;    &lt;/SafeAreaView&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>